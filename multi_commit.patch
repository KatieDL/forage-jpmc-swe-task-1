From 15de24f2bfb7cd774cb9521075b289fdca217696 Mon Sep 17 00:00:00 2001
From: katiedl <katiedalylonergan@gmail.com>
Date: Wed, 8 Nov 2023 23:51:01 +0000
Subject: [PATCH 1/2] first stage changes

---
 client3.py | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/client3.py b/client3.py
index 3fc09b7..66f3cb6 100644
--- a/client3.py
+++ b/client3.py
@@ -35,14 +35,18 @@ def getDataPoint(quote):
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price) / 2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
     """ ------------- Update this function ------------- """
-    return 1
+    """ Also create some unit tests for this function in client_test.py """
+    if (price_b == 0):
+        # when price_b is 0 avoid throwing ZeroDivisionError
+        return
+    return price_a/price_b
 
 
 # Main
@@ -52,8 +56,10 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices = {}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
-- 
2.42.0.windows.2


From 92975b0a1957d8d3bb70616a2c70aa1d2de9cfc3 Mon Sep 17 00:00:00 2001
From: katiedl <katiedalylonergan@gmail.com>
Date: Wed, 22 Nov 2023 02:03:30 +0000
Subject: [PATCH 2/2] Finished forage task. Made edits, improvements, and added
 unit tests for getDataPoint and getRatio.

---
 client_test.py | 97 ++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 94 insertions(+), 3 deletions(-)

diff --git a/client_test.py b/client_test.py
index af2bf26..eae2ee9 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,13 +1,16 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
-  def test_getDataPoint_calculatePrice(self):
+  def test_getDataPoint_calculatePriceAskGreaterThanBid(self):
     quotes = [
       {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    # (Edit 2: Added assertion)
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'],quote['top_bid']['price'],quote['top_ask']['price'],(quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,9 +18,97 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
-
+    # (Edit 3: Added assertion)
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'],quote['top_bid']['price'],quote['top_ask']['price'],(quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
 
   """ ------------ Add more unit tests ------------ """
+  # (Edit 4: Added Test for Bid = Ask)
+  def test_getDataPoint_calculatePriceBidEqualsAsk(self):
+    quotes = [
+      {'top_ask': {'price': 120.48, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+    ]
+
+    """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'],quote['top_bid']['price'],quote['top_ask']['price'],(quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
+
+  # (Edit 5: Added test that combines all above scenarious into 1 test function as alternative)
+  def test_getDataPoint_calculatePriceAll(self):
+    """ my alternative version of the tests above is to combine all the different scenarios into one table without including any duplicates"""
+    quotes = [
+      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 120.48, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',  'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'],quote['top_bid']['price'],quote['top_ask']['price'],(quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
+
+    # (Edit 6: Another way of doing the above test cases, is with the reduced number of lines)
+    # quotes = [
+    #   {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+    #   {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'DEF'},
+    #   {'top_ask': {'price': 120.48, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'GHI'},
+    # ]
+
+  # (Edit 1: My different version of the original "test_getDataPoint_calculatePrice")
+  def test_getDataPoint_calculatePriceAlternativeApproach(self):
+    """
+    The first test "test_getDataPoint_calculatePriceAskGreaterThanBid" is poor because it copies the implementation
+      of the main code into the test.
+      This test is the same scenario as the original test except that it shows a different testing style.
+      The different style here is that the new approach here uses precalculated values as the expected values.
+      Many developers prefer this approach.
+      """
+    quotes = [
+      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+
+    """ ------------ Add the assertion below ------------ """
+    expected_results = {
+     'ABC': ('ABC', 120.48, 121.2, 120.84),
+     'DEF': ('DEF', 117.87, 121.68, 119.775)
+    }
+
+    for quote in quotes:
+      actual = getDataPoint(quote)
+
+      # better test as expected values are independently calculated in advance
+      stock_code = quote['stock']
+      expected = expected_results[stock_code]
+
+      self.assertEqual(actual, expected)
+
+      # implementation below is the one suggested by JPMC/Forage, you can see that it is just a copy of the main code in client.py .
+      # expected = (quote['stock'],quote['top_bid']['price'],quote['top_ask']['price'],(quote['top_bid']['price'] + quote['top_ask']['price']) / 2)
+
+      # Full Original:
+      # def test_getDataPoint_calculatePriceAskGreaterThanBid(self):
+      #   quotes = [
+      #     {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      #     {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+      #   ]
+      #   """ ------------ Add the assertion below ------------ """
+      #   for quote in quotes:
+      #     self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'],(quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
+
+  def test_getRatio_whenBisZero(self):
+    actual = getRatio(10,0)
+    self.assertEqual(actual,None)
+
+  def test_getRatio_whenAisZero(self):
+    actual = getRatio(0,1)
+    self.assertEqual(actual,0)
+
+  def test_getRatio_whenBandAisZero(self):
+    actual = getRatio(0,0)
+    self.assertEqual(actual,None)
+  def test_getRatio_whenBisNonZero(self):
+    actual = getRatio(10,2)
+    self.assertEqual(actual,5)
 
 
 
-- 
2.42.0.windows.2

